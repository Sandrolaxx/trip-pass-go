// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package pg

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const confirmParticipant = `-- name: ConfirmParticipant :exec
UPDATE AKT_PARTICIPANT
SET "confirmed" = true
WHERE id = $1
`

func (q *Queries) ConfirmParticipant(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, confirmParticipant, id)
	return err
}

const createActivity = `-- name: CreateActivity :one
INSERT INTO AKT_ACTIVITY
    ("trip_id", "title", "date") VALUES
    ( $1, $2, $3 )
RETURNING "id"
`

type CreateActivityParams struct {
	TripID uuid.UUID
	Title  string
	Date   pgtype.Timestamp
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createActivity, arg.TripID, arg.Title, arg.Date)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createTripLink = `-- name: CreateTripLink :one
INSERT INTO AKT_LINK
    ("trip_id", "title", "url") VALUES
    ( $1, $2, $3 )
RETURNING "id"
`

type CreateTripLinkParams struct {
	TripID uuid.UUID
	Title  string
	Url    string
}

func (q *Queries) CreateTripLink(ctx context.Context, arg CreateTripLinkParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createTripLink, arg.TripID, arg.Title, arg.Url)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getParticipant = `-- name: GetParticipant :one
SELECT "id", "trip_id", "email", "confirmed"
FROM AKT_PARTICIPANT
WHERE id = $1
`

func (q *Queries) GetParticipant(ctx context.Context, id uuid.UUID) (AktParticipant, error) {
	row := q.db.QueryRow(ctx, getParticipant, id)
	var i AktParticipant
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.Email,
		&i.Confirmed,
	)
	return i, err
}

const getParticipants = `-- name: GetParticipants :many
SELECT "id", "trip_id", "email", "confirmed"
FROM AKT_PARTICIPANT
WHERE id = $1
`

func (q *Queries) GetParticipants(ctx context.Context, id uuid.UUID) ([]AktParticipant, error) {
	rows, err := q.db.Query(ctx, getParticipants, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AktParticipant
	for rows.Next() {
		var i AktParticipant
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.Email,
			&i.Confirmed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrip = `-- name: GetTrip :one
SELECT "id", "destination", "owner_email", "owner_name", "confirmed", "start_at", "end_at"
FROM AKT_TRIP
WHERE id = $1
`

func (q *Queries) GetTrip(ctx context.Context, id uuid.UUID) (AktTrip, error) {
	row := q.db.QueryRow(ctx, getTrip, id)
	var i AktTrip
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.OwnerEmail,
		&i.OwnerName,
		&i.Confirmed,
		&i.StartAt,
		&i.EndAt,
	)
	return i, err
}

const getTripActivities = `-- name: GetTripActivities :many
SELECT "id", "trip_id", "title", "date"
FROM AKT_ACTIVITY
WHERE trip_id = $1
`

func (q *Queries) GetTripActivities(ctx context.Context, tripID uuid.UUID) ([]AktActivity, error) {
	rows, err := q.db.Query(ctx, getTripActivities, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AktActivity
	for rows.Next() {
		var i AktActivity
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.Title,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTripLinks = `-- name: GetTripLinks :many
SELECT "id", "trip_id", "title", "url"
FROM AKT_LINK
WHERE trip_id = $1
`

func (q *Queries) GetTripLinks(ctx context.Context, tripID uuid.UUID) ([]AktLink, error) {
	rows, err := q.db.Query(ctx, getTripLinks, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AktLink
	for rows.Next() {
		var i AktLink
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.Title,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTrip = `-- name: InsertTrip :one
INSERT INTO AKT_TRIP
    ("destination", "owner_email", "owner_name", "start_at", "end_at") VALUES
    ( $1, $2, $3, $4, $5 )
RETURNING "id"
`

type InsertTripParams struct {
	Destination string
	OwnerEmail  string
	OwnerName   string
	StartAt     pgtype.Timestamp
	EndAt       pgtype.Timestamp
}

func (q *Queries) InsertTrip(ctx context.Context, arg InsertTripParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertTrip,
		arg.Destination,
		arg.OwnerEmail,
		arg.OwnerName,
		arg.StartAt,
		arg.EndAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const inviteParticipantToTrip = `-- name: InviteParticipantToTrip :one
INSERT INTO AKT_PARTICIPANT 
    ("trip_id", "email") VALUES
    ( $1, $2 )
RETURNING "id"
`

type InviteParticipantToTripParams struct {
	TripID uuid.UUID
	Email  string
}

func (q *Queries) InviteParticipantToTrip(ctx context.Context, arg InviteParticipantToTripParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, inviteParticipantToTrip, arg.TripID, arg.Email)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

type InviteParticipantsToTripParams struct {
	TripID uuid.UUID
	Email  string
}

const updateTrip = `-- name: UpdateTrip :exec
UPDATE AKT_TRIP
SET
    "destination" = $1,
    "end_at" = $2,
    "start_at" = $3,
    "confirmed" = $4
WHERE id = $5
`

type UpdateTripParams struct {
	Destination string
	EndAt       pgtype.Timestamp
	StartAt     pgtype.Timestamp
	Confirmed   bool
	ID          uuid.UUID
}

func (q *Queries) UpdateTrip(ctx context.Context, arg UpdateTripParams) error {
	_, err := q.db.Exec(ctx, updateTrip,
		arg.Destination,
		arg.EndAt,
		arg.StartAt,
		arg.Confirmed,
		arg.ID,
	)
	return err
}
