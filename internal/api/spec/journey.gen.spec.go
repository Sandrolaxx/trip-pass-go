// Package journey provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/discord-gophers/goapi-gen/runtime"
	openapi_types "github.com/discord-gophers/goapi-gen/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

// CreateActivityRequest defines model for CreateActivityRequest.
type CreateActivityRequest struct {
	Date  time.Time `json:"date" validate:"required"`
	Title string    `json:"title" validate:"required"`
}

// CreateActivityResponse defines model for CreateActivityResponse.
type CreateActivityResponse struct {
	ActivityID string `json:"activityId"`
}

// CreateLinkRequest defines model for CreateLinkRequest.
type CreateLinkRequest struct {
	Title string `json:"title" validate:"required"`
	URL   string `json:"url" validate:"required,url"`
}

// CreateLinkResponse defines model for CreateLinkResponse.
type CreateLinkResponse struct {
	LinkID string `json:"linkId"`
}

// CreateTripRequest defines model for CreateTripRequest.
type CreateTripRequest struct {
	Destination  string                `json:"destination" validate:"required,min=4"`
	EndAt        time.Time             `json:"endAt" validate:"required"`
	GuestsEmails []openapi_types.Email `json:"guestsEmails" validate:"required,dive,email"`//email é um array obrigatório, que utilizamos a diretiva dive, para mergulhar na estrutura e então validar cada e-mail
	OwnerEmail   openapi_types.Email   `json:"ownerEmail" validate:"required,email"`
	OwnerName    string                `json:"ownerName" validate:"required"`
	StartAt      time.Time             `json:"startAt" validate:"required"`
}

// CreateTripResponse defines model for CreateTripResponse.
type CreateTripResponse struct {
	TripID string `json:"tripId"`
}

// Bad request
type Error struct {
	Message string `json:"message"`
}

// GetLinksResponse defines model for GetLinksResponse.
type GetLinksResponse struct {
	Links []GetLinksResponseArray `json:"links"`
}

// GetLinksResponseArray defines model for GetLinksResponseArray.
type GetLinksResponseArray struct {
	ID    string `json:"id"`
	Title string `json:"title"`
	URL   string `json:"url"`
}

// GetTripActivitiesResponse defines model for GetTripActivitiesResponse.
type GetTripActivitiesResponse struct {
	Activities []GetTripActivitiesResponseOuterArray `json:"activities"`
}

// GetTripActivitiesResponseInnerArray defines model for GetTripActivitiesResponseInnerArray.
type GetTripActivitiesResponseInnerArray struct {
	Date  time.Time `json:"date"`
	ID    string    `json:"id"`
	Title string    `json:"title"`
}

// GetTripActivitiesResponseOuterArray defines model for GetTripActivitiesResponseOuterArray.
type GetTripActivitiesResponseOuterArray struct {
	Activities []GetTripActivitiesResponseInnerArray `json:"activities"`
	Date       time.Time                             `json:"date"`
}

// GetTripDetailsResponse defines model for GetTripDetailsResponse.
type GetTripDetailsResponse struct {
	Trip GetTripDetailsResponseTripObj `json:"trip"`
}

// GetTripDetailsResponseTripObj defines model for GetTripDetailsResponseTripObj.
type GetTripDetailsResponseTripObj struct {
	Confirmed   bool      `json:"confirmed"`
	Destination string    `json:"destination"`
	EndAt       time.Time `json:"endAt"`
	ID          string    `json:"id"`
	StartAt     time.Time `json:"startAt"`
}

// GetTripParticipantsResponse defines model for GetTripParticipantsResponse.
type GetTripParticipantsResponse struct {
	Participants []GetTripParticipantsResponseArray `json:"participants"`
}

// GetTripParticipantsResponseArray defines model for GetTripParticipantsResponseArray.
type GetTripParticipantsResponseArray struct {
	Confirmed bool                `json:"confirmed"`
	Email     openapi_types.Email `json:"email"`
	ID        string              `json:"id"`
	Name      *string             `json:"name"`
}

// InviteParticipantRequest defines model for InviteParticipantRequest.
type InviteParticipantRequest struct {
	Email openapi_types.Email `json:"email" validate:"required,email"`
}

// UpdateTripRequest defines model for UpdateTripRequest.
type UpdateTripRequest struct {
	Destination string    `json:"destination" validate:"required,min=4"`
	EndAt       time.Time `json:"endAt" validate:"required"`
	StartAt     time.Time `json:"startAt" validate:"required"`
}

// PatchParticipantsConfirmParams defines parameters for PatchParticipantsConfirm.
type PatchParticipantsConfirmParams struct {
	ID string `json:"id"`
}

// GetTripsParams defines parameters for GetTrips.
type GetTripsParams struct {
	ID string `json:"id"`
}

// PostTripsJSONBody defines parameters for PostTrips.
type PostTripsJSONBody CreateTripRequest

// PutTripsJSONBody defines parameters for PutTrips.
type PutTripsJSONBody UpdateTripRequest

// PutTripsParams defines parameters for PutTrips.
type PutTripsParams struct {
	ID string `json:"id"`
}

// GetTripsActivitiesParams defines parameters for GetTripsActivities.
type GetTripsActivitiesParams struct {
	ID string `json:"id"`
}

// PostTripsActivitiesJSONBody defines parameters for PostTripsActivities.
type PostTripsActivitiesJSONBody CreateActivityRequest

// PostTripsActivitiesParams defines parameters for PostTripsActivities.
type PostTripsActivitiesParams struct {
	ID string `json:"id"`
}

// GetTripsConfirmParams defines parameters for GetTripsConfirm.
type GetTripsConfirmParams struct {
	ID string `json:"id"`
}

// PostTripsInvitesJSONBody defines parameters for PostTripsInvites.
type PostTripsInvitesJSONBody InviteParticipantRequest

// PostTripsInvitesParams defines parameters for PostTripsInvites.
type PostTripsInvitesParams struct {
	TripID string `json:"tripId"`
}

// GetTripsLinksParams defines parameters for GetTripsLinks.
type GetTripsLinksParams struct {
	ID string `json:"id"`
}

// PostTripsLinksJSONBody defines parameters for PostTripsLinks.
type PostTripsLinksJSONBody CreateLinkRequest

// PostTripsLinksParams defines parameters for PostTripsLinks.
type PostTripsLinksParams struct {
	ID string `json:"id"`
}

// GetTripsParticipantsParams defines parameters for GetTripsParticipants.
type GetTripsParticipantsParams struct {
	ID string `json:"id"`
}

// PostTripsJSONRequestBody defines body for PostTrips for application/json ContentType.
type PostTripsJSONRequestBody PostTripsJSONBody

// Bind implements render.Binder.
func (PostTripsJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PutTripsJSONRequestBody defines body for PutTrips for application/json ContentType.
type PutTripsJSONRequestBody PutTripsJSONBody

// Bind implements render.Binder.
func (PutTripsJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostTripsActivitiesJSONRequestBody defines body for PostTripsActivities for application/json ContentType.
type PostTripsActivitiesJSONRequestBody PostTripsActivitiesJSONBody

// Bind implements render.Binder.
func (PostTripsActivitiesJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostTripsInvitesJSONRequestBody defines body for PostTripsInvites for application/json ContentType.
type PostTripsInvitesJSONRequestBody PostTripsInvitesJSONBody

// Bind implements render.Binder.
func (PostTripsInvitesJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostTripsLinksJSONRequestBody defines body for PostTripsLinks for application/json ContentType.
type PostTripsLinksJSONRequestBody PostTripsLinksJSONBody

// Bind implements render.Binder.
func (PostTripsLinksJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// PatchParticipantsConfirmJSON204Response is a constructor method for a PatchParticipantsConfirm response.
// A *Response is returned with the configured status code and content type from the spec.
func PatchParticipantsConfirmJSON204Response(body interface{}) *Response {
	return &Response{
		body:        body,
		Code:        204,
		contentType: "application/json",
	}
}

// PatchParticipantsConfirmJSON400Response is a constructor method for a PatchParticipantsConfirm response.
// A *Response is returned with the configured status code and content type from the spec.
func PatchParticipantsConfirmJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// GetTripsJSON200Response is a constructor method for a GetTrips response.
// A *Response is returned with the configured status code and content type from the spec.
func GetTripsJSON200Response(body GetTripDetailsResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetTripsJSON400Response is a constructor method for a GetTrips response.
// A *Response is returned with the configured status code and content type from the spec.
func GetTripsJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostTripsJSON201Response is a constructor method for a PostTrips response.
// A *Response is returned with the configured status code and content type from the spec.
func PostTripsJSON201Response(body CreateTripResponse) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// PostTripsJSON400Response is a constructor method for a PostTrips response.
// A *Response is returned with the configured status code and content type from the spec.
func PostTripsJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PutTripsJSON204Response is a constructor method for a PutTrips response.
// A *Response is returned with the configured status code and content type from the spec.
func PutTripsJSON204Response(body interface{}) *Response {
	return &Response{
		body:        body,
		Code:        204,
		contentType: "application/json",
	}
}

// PutTripsJSON400Response is a constructor method for a PutTrips response.
// A *Response is returned with the configured status code and content type from the spec.
func PutTripsJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// GetTripsActivitiesJSON200Response is a constructor method for a GetTripsActivities response.
// A *Response is returned with the configured status code and content type from the spec.
func GetTripsActivitiesJSON200Response(body GetTripActivitiesResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetTripsActivitiesJSON400Response is a constructor method for a GetTripsActivities response.
// A *Response is returned with the configured status code and content type from the spec.
func GetTripsActivitiesJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostTripsActivitiesJSON201Response is a constructor method for a PostTripsActivities response.
// A *Response is returned with the configured status code and content type from the spec.
func PostTripsActivitiesJSON201Response(body CreateActivityResponse) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// PostTripsActivitiesJSON400Response is a constructor method for a PostTripsActivities response.
// A *Response is returned with the configured status code and content type from the spec.
func PostTripsActivitiesJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// GetTripsConfirmJSON204Response is a constructor method for a GetTripsConfirm response.
// A *Response is returned with the configured status code and content type from the spec.
func GetTripsConfirmJSON204Response(body interface{}) *Response {
	return &Response{
		body:        body,
		Code:        204,
		contentType: "application/json",
	}
}

// GetTripsConfirmJSON400Response is a constructor method for a GetTripsConfirm response.
// A *Response is returned with the configured status code and content type from the spec.
func GetTripsConfirmJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostTripsInvitesJSON201Response is a constructor method for a PostTripsInvites response.
// A *Response is returned with the configured status code and content type from the spec.
func PostTripsInvitesJSON201Response(body interface{}) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// PostTripsInvitesJSON400Response is a constructor method for a PostTripsInvites response.
// A *Response is returned with the configured status code and content type from the spec.
func PostTripsInvitesJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// GetTripsLinksJSON200Response is a constructor method for a GetTripsLinks response.
// A *Response is returned with the configured status code and content type from the spec.
func GetTripsLinksJSON200Response(body GetLinksResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetTripsLinksJSON400Response is a constructor method for a GetTripsLinks response.
// A *Response is returned with the configured status code and content type from the spec.
func GetTripsLinksJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostTripsLinksJSON201Response is a constructor method for a PostTripsLinks response.
// A *Response is returned with the configured status code and content type from the spec.
func PostTripsLinksJSON201Response(body CreateLinkResponse) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// PostTripsLinksJSON400Response is a constructor method for a PostTripsLinks response.
// A *Response is returned with the configured status code and content type from the spec.
func PostTripsLinksJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// GetTripsParticipantsJSON200Response is a constructor method for a GetTripsParticipants response.
// A *Response is returned with the configured status code and content type from the spec.
func GetTripsParticipantsJSON200Response(body GetTripParticipantsResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetTripsParticipantsJSON400Response is a constructor method for a GetTripsParticipants response.
// A *Response is returned with the configured status code and content type from the spec.
func GetTripsParticipantsJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Confirms a participant on a trip.
	// (PATCH /participants/confirm)
	PatchParticipantsConfirm(w http.ResponseWriter, r *http.Request, params PatchParticipantsConfirmParams) *Response
	// Get a trip details.
	// (GET /trips)
	GetTrips(w http.ResponseWriter, r *http.Request, params GetTripsParams) *Response
	// Create a new trip
	// (POST /trips)
	PostTrips(w http.ResponseWriter, r *http.Request) *Response
	// Update a trip.
	// (PUT /trips)
	PutTrips(w http.ResponseWriter, r *http.Request, params PutTripsParams) *Response
	// Get a trip activities.
	// (GET /trips/activities)
	GetTripsActivities(w http.ResponseWriter, r *http.Request, params GetTripsActivitiesParams) *Response
	// Create a trip activity.
	// (POST /trips/activities)
	PostTripsActivities(w http.ResponseWriter, r *http.Request, params PostTripsActivitiesParams) *Response
	// Confirm a trip and send e-mail invitations.
	// (GET /trips/confirm)
	GetTripsConfirm(w http.ResponseWriter, r *http.Request, params GetTripsConfirmParams) *Response
	// Invite someone to the trip.
	// (POST /trips/invites)
	PostTripsInvites(w http.ResponseWriter, r *http.Request, params PostTripsInvitesParams) *Response
	// Get a trip links.
	// (GET /trips/links)
	GetTripsLinks(w http.ResponseWriter, r *http.Request, params GetTripsLinksParams) *Response
	// Create a trip link.
	// (POST /trips/links)
	PostTripsLinks(w http.ResponseWriter, r *http.Request, params PostTripsLinksParams) *Response
	// Get a trip participants.
	// (GET /trips/participants)
	GetTripsParticipants(w http.ResponseWriter, r *http.Request, params GetTripsParticipantsParams) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// PatchParticipantsConfirm operation middleware
func (siw *ServerInterfaceWrapper) PatchParticipantsConfirm(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchParticipantsConfirmParams

	headers := r.Header

	// ------------- Required header parameter "id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("id")]; found {
		var ID string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{n, "id"})
			return
		}

		if err := runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationHeader, valueList[0], &ID); err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
			return
		}

		params.ID = ID

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{"id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PatchParticipantsConfirm(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetTrips operation middleware
func (siw *ServerInterfaceWrapper) GetTrips(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTripsParams

	headers := r.Header

	// ------------- Required header parameter "id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("id")]; found {
		var ID string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{n, "id"})
			return
		}

		if err := runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationHeader, valueList[0], &ID); err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
			return
		}

		params.ID = ID

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{"id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetTrips(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostTrips operation middleware
func (siw *ServerInterfaceWrapper) PostTrips(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostTrips(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PutTrips operation middleware
func (siw *ServerInterfaceWrapper) PutTrips(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params PutTripsParams

	headers := r.Header

	// ------------- Required header parameter "id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("id")]; found {
		var ID string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{n, "id"})
			return
		}

		if err := runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationHeader, valueList[0], &ID); err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
			return
		}

		params.ID = ID

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{"id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PutTrips(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetTripsActivities operation middleware
func (siw *ServerInterfaceWrapper) GetTripsActivities(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTripsActivitiesParams

	headers := r.Header

	// ------------- Required header parameter "id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("id")]; found {
		var ID string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{n, "id"})
			return
		}

		if err := runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationHeader, valueList[0], &ID); err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
			return
		}

		params.ID = ID

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{"id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetTripsActivities(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostTripsActivities operation middleware
func (siw *ServerInterfaceWrapper) PostTripsActivities(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params PostTripsActivitiesParams

	headers := r.Header

	// ------------- Required header parameter "id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("id")]; found {
		var ID string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{n, "id"})
			return
		}

		if err := runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationHeader, valueList[0], &ID); err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
			return
		}

		params.ID = ID

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{"id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostTripsActivities(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetTripsConfirm operation middleware
func (siw *ServerInterfaceWrapper) GetTripsConfirm(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTripsConfirmParams

	headers := r.Header

	// ------------- Required header parameter "id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("id")]; found {
		var ID string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{n, "id"})
			return
		}

		if err := runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationHeader, valueList[0], &ID); err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
			return
		}

		params.ID = ID

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{"id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetTripsConfirm(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostTripsInvites operation middleware
func (siw *ServerInterfaceWrapper) PostTripsInvites(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params PostTripsInvitesParams

	headers := r.Header

	// ------------- Required header parameter "tripId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tripId")]; found {
		var TripID string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{n, "tripId"})
			return
		}

		if err := runtime.BindStyledParameterWithLocation("simple", false, "tripId", runtime.ParamLocationHeader, valueList[0], &TripID); err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "tripId"})
			return
		}

		params.TripID = TripID

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{"tripId"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostTripsInvites(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetTripsLinks operation middleware
func (siw *ServerInterfaceWrapper) GetTripsLinks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTripsLinksParams

	headers := r.Header

	// ------------- Required header parameter "id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("id")]; found {
		var ID string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{n, "id"})
			return
		}

		if err := runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationHeader, valueList[0], &ID); err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
			return
		}

		params.ID = ID

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{"id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetTripsLinks(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostTripsLinks operation middleware
func (siw *ServerInterfaceWrapper) PostTripsLinks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params PostTripsLinksParams

	headers := r.Header

	// ------------- Required header parameter "id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("id")]; found {
		var ID string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{n, "id"})
			return
		}

		if err := runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationHeader, valueList[0], &ID); err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
			return
		}

		params.ID = ID

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{"id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostTripsLinks(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetTripsParticipants operation middleware
func (siw *ServerInterfaceWrapper) GetTripsParticipants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTripsParticipantsParams

	headers := r.Header

	// ------------- Required header parameter "id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("id")]; found {
		var ID string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{n, "id"})
			return
		}

		if err := runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationHeader, valueList[0], &ID); err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
			return
		}

		params.ID = ID

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{"id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetTripsParticipants(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:    "/",
		BaseRouter: chi.NewRouter(),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Patch("/participants/confirm", wrapper.PatchParticipantsConfirm)
		r.Get("/trips", wrapper.GetTrips)
		r.Post("/trips", wrapper.PostTrips)
		r.Put("/trips", wrapper.PutTrips)
		r.Get("/trips/activities", wrapper.GetTripsActivities)
		r.Post("/trips/activities", wrapper.PostTripsActivities)
		r.Get("/trips/confirm", wrapper.GetTripsConfirm)
		r.Post("/trips/invites", wrapper.PostTripsInvites)
		r.Get("/trips/links", wrapper.GetTripsLinks)
		r.Post("/trips/links", wrapper.PostTripsLinks)
		r.Get("/trips/participants", wrapper.GetTripsParticipants)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xazW4bNxB+FYLtcWU5rU8L9OD8IHARJEaQoofAB2p3JNHeJTfkrBzB0NP00FOPfQK/",
	"WEFyJXF/JO2urChyerJFkTPD+Wa+GZJ6oJFMMylAoKbhA9XRFFJm/32lgCFcRshnHOcf4UsOGs0XLI45",
	"cilYcq1kBgo5aBqOWaIhoJk39EBjhmD+jqVKGdLQDgyQp0ADivMMaEg1Ki4mNKBfBxM5gK+o2ADZxK6f",
	"sYQ7GVTBl5wriOliEVDkmFjBvWUsgvWn8LMzdCn3ZmWbHN1ChHQR1LyhMyk0dHQHK5ZfxSWn5DmPa/6o",
	"Wuit3WzfOy7u+iG1v0cDmqukvC/Fe8McGGE1mJyVTtMuL/RCKOHirg86xbrNNn1SPOuZQ6CRC2Zmm48p",
	"F+9ATHBKw4vezk25+O3CbgJEfImHSNGJ2ap+kzKe2HkcIdUlRWC+q3t2NcCUYvP2e4r5DAIn0+iX9wKU",
	"Vd9CaWslFfnvWbpv0mhkCg8BQZXhvDBaa10GQAUvf3slV+4K8F5Jh4pnfZKuWNdk0xulpNppRgw6Ujxz",
	"qUVfspioIkWrJqagNZs0YF21aTmxyai3gIaa9B7cVE6lnxWMaUh/Gq6L+LCo4MOqskubTdXsauIx3cp4",
	"J6/bDngbkDdW95YVprolp2NH4XgLaAK4qO8c9H4VfrnflkA1q/6QI6h2sHlqO+3uSoilioM1dotgX9y3",
	"AWoN6bRnz63Hw9ZzfA3boJN3mxvZdgHxGtDQ/R603dIBFUVm6MPotpHQO9i7FNPN7EiKMVcpxF6kjaRM",
	"gAnr+/btVsf2qX0idOsJGvNjV7lfe2GLv6+ZQh7xjAnsGySZJ6Jr2jSpb8eHJa0dN9iHGnbEFLRsQ1cR",
	"UhsWRaMp8iRhI8OSqHJoFQnCNXFLjduBvxIzjuC5pd+ZBQ7Vd1c2CBub0j+y+Ec8dX0fp4k6IGY9F2NZ",
	"uNbrut/oDCI+5hF7/PvxX9AkZuTy+opkTDEiyYhFdwMQsRlmWeKm/SVJljAhzkCRSAqNKn/8J2YkzhUT",
	"CESS9+/+JL/LXAmYm5UfZXQHqIHh2ap3COlSBg3oDJR29rw4Oz87NxEkMxAs4zSkv9qhgGYMp9ZFQ59f",
	"hkVGObbDaGr+MaFkvWPONfTaDPtc86pYYmQqlgKC0jT8/EC5MWEKLLZWuax3abz2vst8x5VtDk03ZrHj",
	"Nmv9L+cXBWchCJcXmfWssXd4q13Er+WDyFODueEeA22Zgyy0ZUhfw5jlCZJVyVgE9OL8vJPSbeXBHe4a",
	"FPsnOJsNeZoyNachLRyuCSMedkQKwojpOmxY2ASoFg8jZ2imWN9NAOvwFsVEHwvOp/Pshr7wNDB+C1ig",
	"SWK3AR9VB+HNIqCZ1A0gXku9QrGQ/1LG8yfbUP0asEKqNplq2L44iAEnhasznDAi4N7C24xq3gRq/s0z",
	"8+kjp97KtIqcH4/knaMaGH0ZJSsqH5bP8gWrl/V8mnJNlMwRyD1PEqIAcyUISxKCUyBGlSYjwHsAYUcs",
	"8xStEGEiJrYZchMDAjM7TWojDqcyR7I2whjbXFPWVwfPpro0XLKdXIEpQ7eMM//WZXehOQq0hyps1Xfi",
	"oxS32vPsiRU4P7TmGwNrzWLeyWNrY/r/ceM4x40VpCIm2hxiYZAynhAuZhytKXp7mbITi4u07WRyVcxs",
	"B3HxcvYdssnGC6gDEMpziDTnL6JlClIAQblqRdocaYerN8Wt/GEf/p5F/1F+fz25tsPC5QNbvNfubja+",
	"NYSH6jP8Xzgdpcco/bjoFPsLEzJNIbQmheqbzVZu8K81n80RpfHh6+TYwsdxWzVYLP4LAAD//4p898cH",
	"KgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
